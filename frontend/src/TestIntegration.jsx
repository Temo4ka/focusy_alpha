import React, { useState, useEffect } from 'react';
import { testAPI, apiUtils } from './services/api';

const TestIntegration = () => {
  const [status, setStatus] = useState({
    backend: '–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...',
    data: null,
    error: null
  });
  const [demoUsers, setDemoUsers] = useState([]);
  const [demoTasks, setDemoTasks] = useState([]);
  const [testResult, setTestResult] = useState(null);

  useEffect(() => {
    checkBackendConnection();
  }, []);

  const checkBackendConnection = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –±—ç–∫–µ–Ω–¥–æ–º
      const pingResult = await testAPI.ping();
      setStatus({
        backend: '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω',
        data: pingResult,
        error: null
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
      loadDemoData();
    } catch (error) {
      setStatus({
        backend: '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω',
        data: null,
        error: apiUtils.handleError(error).error
      });
    }
  };

  const loadDemoData = async () => {
    try {
      const [usersData, tasksData] = await Promise.all([
        testAPI.getDemoUsers(),
        testAPI.getDemoTasks()
      ]);
      
      setDemoUsers(usersData.users);
      setDemoTasks(tasksData.tasks);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  const testAnswer = async (taskId, answer) => {
    try {
      const result = await testAPI.submitDemoAnswer(taskId, 1001, answer);
      setTestResult(result);
    } catch (error) {
      setTestResult({ error: apiUtils.handleError(error).error });
    }
  };

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
      <h1>üîß –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Frontend ‚Üî Backend</h1>
      
      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <div style={{ 
        padding: '15px', 
        marginBottom: '20px', 
        backgroundColor: status.backend.includes('‚úÖ') ? '#d4edda' : '#f8d7da',
        border: '1px solid ' + (status.backend.includes('‚úÖ') ? '#c3e6cb' : '#f5c6cb'),
        borderRadius: '5px'
      }}>
        <h3>–°—Ç–∞—Ç—É—Å –±—ç–∫–µ–Ω–¥–∞: {status.backend}</h3>
        {status.data && (
          <div>
            <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {status.data.message}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> {status.data.timestamp}</p>
            <p><strong>–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:</strong></p>
            <ul>
              {Object.entries(status.data.endpoints).map(([key, value]) => (
                <li key={key}><code>{value}</code></li>
              ))}
            </ul>
          </div>
        )}
        {status.error && (
          <p style={{ color: 'red' }}><strong>–û—à–∏–±–∫–∞:</strong> {status.error}</p>
        )}
      </div>

      {/* –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
      {demoUsers.length > 0 && (
        <div style={{ marginBottom: '20px' }}>
          <h3>üë• –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '10px' }}>
            {demoUsers.map(user => (
              <div key={user.user_id} style={{ 
                padding: '10px', 
                border: '1px solid #ddd', 
                borderRadius: '5px',
                backgroundColor: '#f9f9f9'
              }}>
                <h4>{user.name}</h4>
                <p>ID: {user.user_id}</p>
                <p>–ö–ª–∞—Å—Å: {user.user_class}</p>
                <p>–û–ø—ã—Ç: {user.experience_points}</p>
                <p>–ú–æ–Ω–µ—Ç—ã: {user.coins}</p>
                <p>–£—Ä–æ–≤–µ–Ω—å: {user.level}</p>
                <p>–ü–æ–¥–ø–∏—Å–∫–∞: {user.subscribe ? '‚úÖ' : '‚ùå'}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –î–µ–º–æ –∑–∞–¥–∞–Ω–∏—è */}
      {demoTasks.length > 0 && (
        <div style={{ marginBottom: '20px' }}>
          <h3>üìù –î–µ–º–æ –∑–∞–¥–∞–Ω–∏—è</h3>
          {demoTasks.map(task => (
            <div key={task.task_id} style={{ 
              padding: '15px', 
              border: '1px solid #ddd', 
              borderRadius: '5px',
              marginBottom: '10px',
              backgroundColor: '#f9f9f9'
            }}>
              <h4>–ó–∞–¥–∞–Ω–∏–µ {task.task_id}: {task.type}</h4>
              <p><strong>–ü—Ä–µ–¥–º–µ—Ç:</strong> {task.subject}</p>
              <p><strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> {task.difficulty}</p>
              <p><strong>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</strong></p>
              <div style={{ 
                whiteSpace: 'pre-line', 
                backgroundColor: 'white', 
                padding: '10px', 
                border: '1px solid #eee',
                borderRadius: '3px'
              }}>
                {task.content}
              </div>
              
              {/* –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ */}
              <div style={{ marginTop: '10px' }}>
                <p><strong>–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤:</strong></p>
                {task.task_id === 1 && (
                  <div>
                    <button onClick={() => testAnswer(1, '1')} style={{ margin: '2px' }}>1</button>
                    <button onClick={() => testAnswer(1, '2')} style={{ margin: '2px' }}>2 (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)</button>
                    <button onClick={() => testAnswer(1, '3')} style={{ margin: '2px' }}>3</button>
                    <button onClick={() => testAnswer(1, '4')} style={{ margin: '2px' }}>4</button>
                  </div>
                )}
                {task.task_id === 3 && (
                  <div>
                    <button onClick={() => testAnswer(3, 'x = 3')} style={{ margin: '2px' }}>x = 3</button>
                    <button onClick={() => testAnswer(3, 'x = 4')} style={{ margin: '2px' }}>x = 4 (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)</button>
                    <button onClick={() => testAnswer(3, 'x = 5')} style={{ margin: '2px' }}>x = 5</button>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {testResult && (
        <div style={{ 
          padding: '15px', 
          marginTop: '20px',
          backgroundColor: testResult.is_correct ? '#d4edda' : '#f8d7da',
          border: '1px solid ' + (testResult.is_correct ? '#c3e6cb' : '#f5c6cb'),
          borderRadius: '5px'
        }}>
          <h3>üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞</h3>
          {testResult.error ? (
            <p style={{ color: 'red' }}>–û—à–∏–±–∫–∞: {testResult.error}</p>
          ) : (
            <div>
              <p><strong>–ó–∞–¥–∞–Ω–∏–µ:</strong> {testResult.task_id}</p>
              <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {testResult.user_id}</p>
              <p><strong>–û—Ç–≤–µ—Ç:</strong> {testResult.answer}</p>
              <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {testResult.is_correct ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}</p>
              <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {testResult.message}</p>
              {testResult.rewards && (
                <p><strong>–ù–∞–≥—Ä–∞–¥—ã:</strong> +{testResult.rewards.exp} –æ–ø—ã—Ç–∞, +{testResult.rewards.coins} –º–æ–Ω–µ—Ç</p>
              )}
            </div>
          )}
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <div style={{ marginTop: '20px' }}>
        <button 
          onClick={checkBackendConnection}
          style={{
            padding: '10px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        </button>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div style={{ 
        marginTop: '30px', 
        padding: '15px', 
        backgroundColor: '#e7f3ff', 
        border: '1px solid #b8daff',
        borderRadius: '5px'
      }}>
        <h3>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h3>
        <ol>
          <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ <code>http://localhost:3001</code></li>
          <li>–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"</li>
          <li>–î–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∑–∞–¥–∞–Ω–∏—è</li>
          <li>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è</li>
          <li>–ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞</li>
        </ol>
      </div>
    </div>
  );
};

export default TestIntegration;
