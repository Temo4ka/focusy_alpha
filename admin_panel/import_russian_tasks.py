#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import django
import pandas as pd
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from content_management.models import Subject, Task

def import_russian_tasks():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
    try:
        russian_subject = Subject.objects.get(title='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫')
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {russian_subject.title}")
    except Subject.DoesNotExist:
        print("‚ùå –ü—Ä–µ–¥–º–µ—Ç '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å Excel —Ñ–∞–π–ª–∞–º–∏
    excel_dir = os.path.join(os.path.dirname(__file__), '..', 'backend', 'exel_format_tasks')
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    files_to_import = [
        {
            'filename': '–ó–∞–¥–∞–Ω–∏–µ 4_—É–¥–∞—Ä–µ–Ω–∏—è.xlsx',
            'type': '–ó–∞–¥–∞–Ω–∏–µ_4',
            'difficulty': 'medium'
        },
        {
            'filename': '7 ‚Äì –ú–û–†–§–û–õ–û–ì–ò–Ø.xlsx',
            'type': '–ó–∞–¥–∞–Ω–∏–µ_7',
            'difficulty': 'medium'
        },
        {
            'filename': '–∑–∞–¥–∞–Ω–∏–µ 9.xlsx',
            'type': '–ó–∞–¥–∞–Ω–∏–µ_9',
            'difficulty': 'hard'
        },
        {
            'filename': '–ó–∞–¥–∞–Ω–∏–µ 10_ —Ä—É—Å—Å–∫–∏–π.xlsx',
            'type': '–ó–∞–¥–∞–Ω–∏–µ_10',
            'difficulty': 'hard'
        }
    ]
    
    total_imported = 0
    
    for file_info in files_to_import:
        filepath = os.path.join(excel_dir, file_info['filename'])
        
        if not os.path.exists(filepath):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_info['filename']}")
            continue
            
        print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_info['filename']}")
        print(f"   –¢–∏–ø: {file_info['type']}, –°–ª–æ–∂–Ω–æ—Å—Ç—å: {file_info['difficulty']}")
        
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(filepath)
            print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = df.dropna(subset=['–ó–∞–¥–∞–Ω–∏–µ'])  # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∑–∞–¥–∞–Ω–∏—è
            
            imported_count = 0
            
            for index, row in df.iterrows():
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                    if '–°–ª–æ–≤–æ –∫ –∑–∞–¥–∞–Ω–∏—é' in df.columns and pd.notna(row.get('–°–ª–æ–≤–æ –∫ –∑–∞–¥–∞–Ω–∏—é')):
                        content = f"{row['–ó–∞–¥–∞–Ω–∏–µ']}\n\n–°–ª–æ–≤–æ: {row['–°–ª–æ–≤–æ –∫ –∑–∞–¥–∞–Ω–∏—é']}"
                    else:
                        content = str(row['–ó–∞–¥–∞–Ω–∏–µ'])
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    correct_answer = str(row.get('–í–∞—Ä–∏–∞–Ω—Ç –≤–µ—Ä–Ω—ã–π', ''))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                    existing_task = Task.objects.filter(
                        subject=russian_subject,
                        type=file_info['type'],
                        content=content[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    ).first()
                    
                    if existing_task:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                    task = Task.objects.create(
                        subject=russian_subject,
                        type=file_info['type'],
                        difficulty=file_info['difficulty'],
                        content=content,
                        correct_answer=correct_answer,
                        is_active=True
                    )
                    
                    imported_count += 1
                    
                    if imported_count % 10 == 0:
                        print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∑–∞–¥–∞–Ω–∏–π...")
                        
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Ç—Ä–æ–∫–∏ {index}: {e}")
                    continue
            
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∑–∞–¥–∞–Ω–∏–π –∏–∑ {file_info['filename']}")
            total_imported += imported_count
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_info['filename']}: {e}")
            continue
    
    print(f"\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_imported} –∑–∞–¥–∞–Ω–∏–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {Task.objects.count()}")
    print(f"   –ó–∞–¥–∞–Ω–∏–π –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É: {Task.objects.filter(subject=russian_subject).count()}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
    type_stats = Task.objects.filter(subject=russian_subject).values('type').annotate(
        count=django.db.models.Count('task_id')
    ).order_by('type')
    
    print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
    for stat in type_stats:
        print(f"     {stat['type']}: {stat['count']} –∑–∞–¥–∞–Ω–∏–π")

if __name__ == '__main__':
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É...")
    import_russian_tasks()
