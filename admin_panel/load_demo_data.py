#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å FOCUSY
"""

import os
import sys
import django
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from content_management.models import User, Task, Mission, UserMission, UserTaskAttempt

def create_demo_users():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users_data = [
        {'user_id': 1001, 'name': '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', 'age': 12, 'experience_points': 1500, 'coins': 75},
        {'user_id': 1002, 'name': '–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤', 'age': 11, 'experience_points': 2300, 'coins': 120},
        {'user_id': 1003, 'name': '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', 'age': 13, 'experience_points': 890, 'coins': 45},
        {'user_id': 1004, 'name': '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤', 'age': 12, 'experience_points': 3200, 'coins': 180},
        {'user_id': 1005, 'name': '–°–æ—Ñ–∏—è –ù–æ–≤–∏–∫–æ–≤–∞', 'age': 11, 'experience_points': 1200, 'coins': 60},
    ]
    
    created_users = []
    for user_data in users_data:
        user, created = User.objects.get_or_create(
            user_id=user_data['user_id'],
            defaults={
                'name': user_data['name'],
                'age': user_data['age'],
                'experience_points': user_data['experience_points'],
                'coins': user_data['coins'],
                'consent_given': True
            }
        )
        if created:
            created_users.append(user)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return User.objects.filter(user_id__in=[u['user_id'] for u in users_data])

def create_demo_tasks():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    tasks_data = [
        {
            'type': 'multiple_choice',
            'difficulty': 1,
            'content': '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞:\n1) –°–∞–±–∞–∫–∞\n2) –°–æ–±–∞–∫–∞\n3) –°–∞–±–∞–∫–∞\n4) –°–æ–±–∞–∫a',
            'correct_answer': '2',
            'subject': 'russian',
            'grade_level': 4,
            'tags': '–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, –∂–∏–≤–æ—Ç–Ω—ã–µ'
        },
        {
            'type': 'fill_blank',
            'difficulty': 2,
            'content': '–í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –±—É–∫–≤—É: –ú_–¥–≤–µ–¥—å',
            'correct_answer': '–µ',
            'subject': 'russian',
            'grade_level': 4,
            'tags': '–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, –∂–∏–≤–æ—Ç–Ω—ã–µ'
        },
        {
            'type': 'true_false',
            'difficulty': 1,
            'content': '–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: "–ò–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∏—à—É—Ç—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã"',
            'correct_answer': '–í–µ—Ä–Ω–æ',
            'subject': 'russian',
            'grade_level': 4,
            'tags': '–ø—Ä–∞–≤–∏–ª–∞, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã'
        },
        {
            'type': 'multiple_choice',
            'difficulty': 3,
            'content': '–í –∫–∞–∫–æ–º —Å–ª–æ–≤–µ —É–¥–∞—Ä–µ–Ω–∏–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å–ª–æ–≥?\n1) –¢–µ–ª–µ—Ñ–æ–Ω\n2) –ö–æ–º–ø—å—é—Ç–µ—Ä\n3) –†–∞–¥–∏–æ\n4) –ú—É–∑—ã–∫–∞',
            'correct_answer': '3',
            'subject': 'russian',
            'grade_level': 5,
            'tags': '—É–¥–∞—Ä–µ–Ω–∏–µ, —Ñ–æ–Ω–µ—Ç–∏–∫–∞'
        },
        {
            'type': 'fill_blank',
            'difficulty': 2,
            'content': '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–∞–¥–µ–∂ —Å–ª–æ–≤–∞ "–∫–Ω–∏–≥–æ–π": –Ø —á–∏—Ç–∞—é _____ .',
            'correct_answer': '—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂',
            'subject': 'russian',
            'grade_level': 5,
            'tags': '–ø–∞–¥–µ–∂–∏, –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è'
        }
    ]
    
    created_tasks = []
    for task_data in tasks_data:
        task, created = Task.objects.get_or_create(
            content=task_data['content'],
            defaults=task_data
        )
        if created:
            created_tasks.append(task)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_tasks)} –∑–∞–¥–∞–Ω–∏–π")
    return Task.objects.all()

def create_demo_missions():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏"""
    missions_data = [
        {
            'title': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
            'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 5 –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é',
            'reward_exp': 100,
            'reward_coins': 25,
            'difficulty_level': 1,
            'required_tasks': 5
        },
        {
            'title': '–ó–Ω–∞—Ç–æ–∫ –ø—Ä–∞–≤–∏–ª',
            'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 –∑–∞–¥–∞–Ω–∏–π —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 80%',
            'reward_exp': 250,
            'reward_coins': 50,
            'difficulty_level': 2,
            'required_tasks': 10
        },
        {
            'title': '–ú–∞—Å—Ç–µ—Ä —è–∑—ã–∫–∞',
            'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 20 –∑–∞–¥–∞–Ω–∏–π –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
            'reward_exp': 500,
            'reward_coins': 100,
            'difficulty_level': 3,
            'required_tasks': 20
        }
    ]
    
    created_missions = []
    for mission_data in missions_data:
        mission, created = Mission.objects.get_or_create(
            title=mission_data['title'],
            defaults=mission_data
        )
        if created:
            created_missions.append(mission)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_missions)} –º–∏—Å—Å–∏–π")
    return Mission.objects.all()

def create_demo_attempts(users, tasks):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
    attempts_created = 0
    
    for user in users:
        # –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
        num_attempts = random.randint(3, 8)
        user_tasks = random.sample(list(tasks), min(num_attempts, len(tasks)))
        
        for task in user_tasks:
            # –°–ª—É—á–∞–π–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (70%)
            is_correct = random.random() < 0.7
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
            if is_correct:
                selected_answer = task.correct_answer
            else:
                wrong_answers = ['1', '2', '3', '4', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']
                selected_answer = random.choice(wrong_answers)
            
            # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            days_ago = random.randint(0, 30)
            attempt_time = datetime.now() - timedelta(days=days_ago)
            
            attempt, created = UserTaskAttempt.objects.get_or_create(
                user=user,
                task=task,
                defaults={
                    'selected_answer': selected_answer,
                    'is_correct': is_correct,
                    'attempt_time': attempt_time
                }
            )
            
            if created:
                attempts_created += 1
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {attempts_created} –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

def create_demo_user_missions(users, missions):
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∏—Å—Å–∏—è–º–∏"""
    user_missions_created = 0
    
    for user in users:
        # –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ 1-2 –º–∏—Å—Å–∏—è—Ö
        user_missions = random.sample(list(missions), random.randint(1, 2))
        
        for mission in user_missions:
            # 30% —à–∞–Ω—Å —á—Ç–æ –º–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            is_completed = random.random() < 0.3
            completed_at = None
            
            if is_completed:
                days_ago = random.randint(1, 20)
                completed_at = datetime.now() - timedelta(days=days_ago)
            
            user_mission, created = UserMission.objects.get_or_create(
                user=user,
                mission=mission,
                defaults={
                    'is_completed': is_completed,
                    'completed_at': completed_at
                }
            )
            
            if created:
                user_missions_created += 1
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {user_missions_created} —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–º–∏—Å—Å–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö"""
    print("üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è FOCUSY")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        users = create_demo_users()
        tasks = create_demo_tasks()
        missions = create_demo_missions()
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        create_demo_attempts(users, tasks)
        create_demo_user_missions(users, missions)
        
        print("\n" + "=" * 50)
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        print("\nüìä –¢–µ–ø–µ—Ä—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ:")
        print(f"   üë• {users.count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"   üìù {tasks.count()} –∑–∞–¥–∞–Ω–∏–π")
        print(f"   üéØ {missions.count()} –º–∏—Å—Å–∏–π")
        print(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        print("\nüåê –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:")
        print("   http://localhost:8001/admin/")
        print("   http://localhost:8001/analytics/")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
