import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
from config import TELEGRAM_TOKEN, BOT_SETTINGS
from database import db_manager
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
CHOOSING_CLASS, ENTERING_NAME = range(2)

class FocusyBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        self.application.add_handler(CommandHandler("register", self.register_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("register", self.register_command)],
            states={
                CHOOSING_CLASS: [
                    CallbackQueryHandler(self.class_selected, pattern=r'^class_\d+$'),
                    CommandHandler("cancel", self.cancel_registration)
                ],
                ENTERING_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.name_received),
                    CommandHandler("cancel", self.cancel_registration)
                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_registration)]
        )
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        telegram_id = user.id
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {telegram_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db_manager.user_exists(telegram_id):
            user_data = db_manager.get_user_by_telegram_id(telegram_id)
            welcome_text = f"""
üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data['name']}!

–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üÜî ID: {user_data['user_id']}
üìö –ö–ª–∞—Å—Å: {user_data['user_class']}
‚≠ê –û–ø—ã—Ç: {user_data['experience_points']} –æ—á–∫–æ–≤
ü™ô –ú–æ–Ω–µ—Ç—ã: {user_data['coins']}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
            """
        else:
            welcome_text = BOT_SETTINGS['welcome_message'] + "\n\nüöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /register"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="start_register")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")],
            [InlineKeyboardButton("üåê –°–∞–π—Ç", url="http://localhost:3000")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = BOT_SETTINGS['help_message']
        await update.message.reply_text(help_text)
    
    async def register_command(self, update: Update, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        telegram_id = user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db_manager.user_exists(telegram_id):
            user_data = db_manager.get_user_by_telegram_id(telegram_id)
            await update.message.reply_text(
                f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                f"–ò–º—è: {user_data['name']}\n"
                f"ID: {user_data['user_id']}\n"
                f"–ö–ª–∞—Å—Å: {user_data['user_class']}"
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
        keyboard = [
            [InlineKeyboardButton("9 –∫–ª–∞—Å—Å", callback_data="class_9")],
            [InlineKeyboardButton("10 –∫–ª–∞—Å—Å", callback_data="class_10")],
            [InlineKeyboardButton("11 –∫–ª–∞—Å—Å", callback_data="class_11")],
            [InlineKeyboardButton("4 –∫–ª–∞—Å—Å", callback_data="class_4")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéì –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:",
            reply_markup=reply_markup
        )
        
        return CHOOSING_CLASS
    
    async def class_selected(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
        class_data = query.data
        selected_class = class_data.split('_')[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['selected_class'] = selected_class
        
        await query.edit_message_text(
            f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –∏–º—è, –±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏):\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {selected_class}\n\n"
            f"–ü—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, –ú–∞–∫—Å–∏–º, –°–æ—Ñ–∏—è"
        )
        
        return ENTERING_NAME
    
    async def name_received(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
        user = update.effective_user
        telegram_id = user.id
        name = update.message.text.strip()
        selected_class = context.user_data.get('selected_class', '4')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è
        if len(name) < 2 or len(name) > 50:
            await update.message.reply_text(
                "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTERING_NAME
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Å\s]+$', name):
            await update.message.reply_text(
                "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTERING_NAME
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = db_manager.create_user(
            telegram_id=telegram_id,
            name=name,
            user_class=selected_class
        )
        
        if user_data:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
            keyboard = [
                [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="http://localhost:3000")],
                [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            success_text = f"""
üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: {user_data['name']}
üÜî ID: {user_data['user_id']}
üìö –ö–ª–∞—Å—Å: {user_data['user_class']}
‚≠ê –û–ø—ã—Ç: {user_data['experience_points']} –æ—á–∫–æ–≤
ü™ô –ú–æ–Ω–µ—Ç—ã: {user_data['coins']}

üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à ID: {user_data['user_id']}
‚Ä¢ –†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø—ã—Ç
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            """
            
            await update.message.reply_text(success_text, reply_markup=reply_markup)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.clear()
            
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return ConversationHandler.END
    
    async def cancel_registration(self, update: Update, context):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /register"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.clear()
        
        return ConversationHandler.END
    
    async def profile_command(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        telegram_id = user.id
        
        if not db_manager.user_exists(telegram_id):
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            )
            return
        
        user_data = db_manager.get_user_by_telegram_id(telegram_id)
        stats = db_manager.get_user_stats(user_data['user_id'])
        
        profile_text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ò–º—è: {user_data['name']}
‚Ä¢ ID: {user_data['user_id']}
‚Ä¢ –ö–ª–∞—Å—Å: {user_data['user_class']}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['created_at'].strftime('%d.%m.%Y')}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –û–ø—ã—Ç: {user_data['experience_points']} –æ—á–∫–æ–≤
‚Ä¢ –ú–æ–Ω–µ—Ç—ã: {user_data['coins']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts'] if stats else 0}
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_attempts'] if stats else 0}

üíé –ü–æ–¥–ø–∏—Å–∫–∞: {'–ê–∫—Ç–∏–≤–Ω–∞' if user_data['subscribe'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="http://localhost:3000")],
            [InlineKeyboardButton("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(profile_text, reply_markup=reply_markup)
    
    async def status_command(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        telegram_id = user.id
        
        if db_manager.user_exists(telegram_id):
            user_data = db_manager.get_user_by_telegram_id(telegram_id)
            status_text = f"""
‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

üë§ –ò–º—è: {user_data['name']}
üÜî ID: {user_data['user_id']}
üìö –ö–ª–∞—Å—Å: {user_data['user_class']}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['created_at'].strftime('%d.%m.%Y')}

üöÄ –î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID: {user_data['user_id']}
            """
        else:
            status_text = """
‚ùå –°—Ç–∞—Ç—É—Å: –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞–Ω–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            """
        
        await update.message.reply_text(status_text)
    
    async def button_callback(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "start_register":
            await self.register_command(update, context)
        elif query.data == "show_help":
            await query.edit_message_text(BOT_SETTINGS['help_message'])
        elif query.data == "show_profile":
            await self.profile_command(update, context)
        elif query.data == "refresh_stats":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user = update.effective_user
            telegram_id = user.id
            if db_manager.user_exists(telegram_id):
                user_data = db_manager.get_user_by_telegram_id(telegram_id)
                stats = db_manager.get_user_stats(user_data['user_id'])
                
                stats_text = f"""
üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

‚≠ê –û–ø—ã—Ç: {user_data['experience_points']} –æ—á–∫–æ–≤
ü™ô –ú–æ–Ω–µ—Ç—ã: {user_data['coins']}
üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts'] if stats else 0}
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_attempts'] if stats else 0}
                """
                
                await query.edit_message_text(stats_text)
    
    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        if not message_text.startswith('/'):
            if not db_manager.user_exists(user.id):
                await update.message.reply_text(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register"
                )
            else:
                await update.message.reply_text(
                    "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:\n\n"
                    "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                    "/help - –°–ø—Ä–∞–≤–∫–∞\n"
                    "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
                    "/status - –°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                )
    
    def run_sync(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ FOCUSY Telegram –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not db_manager.connection:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        db_manager.close()

if __name__ == "__main__":
    bot = FocusyBot()
    try:
        bot.run_sync()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        bot.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.stop()
