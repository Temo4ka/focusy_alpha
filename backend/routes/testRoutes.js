const express = require('express');
const router = express.Router();

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
router.get('/ping', (req, res) => {
  res.json({ 
    message: 'FOCUSY Backend API is working!',
    timestamp: new Date().toISOString(),
    endpoints: {
      users: '/api/users',
      tasks: '/api/tasks', 
      missions: '/api/missions',
      test: '/api/test'
    }
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/demo-users', (req, res) => {
  const demoUsers = [
    {
      user_id: 1001,
      name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
      user_class: '5',
      experience_points: 1500,
      coins: 75,
      subscribe: false,
      level: 2
    },
    {
      user_id: 1002,
      name: '–ú–∞–∫—Å–∏–º –í–æ–ª–∫–æ–≤',
      user_class: '6',
      experience_points: 2300,
      coins: 115,
      subscribe: true,
      level: 3
    },
    {
      user_id: 1003,
      name: '–°–æ—Ñ–∏—è –°–º–∏—Ä–Ω–æ–≤–∞',
      user_class: '4',
      experience_points: 800,
      coins: 40,
      subscribe: false,
      level: 1
    }
  ];
  
  res.json({
    message: '–î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    users: demoUsers,
    count: demoUsers.length
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
router.get('/demo-tasks', (req, res) => {
  const demoTasks = [
    {
      task_id: 1,
      type: '–ó–∞–¥–∞–Ω–∏–µ_4',
      difficulty: 'easy',
      subject: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
      content: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞:\n1) –°–∞–±–∞–∫–∞\n2) –°–æ–±–∞–∫–∞\n3) –°–æ–±–∞–∫a\n4) –°–∞–±–æ–∫a',
      is_active: true
    },
    {
      task_id: 2,
      type: '–ï–ì–≠_1',
      difficulty: 'hard',
      subject: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
      content: '–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ì–õ–ê–í–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...',
      is_active: true
    },
    {
      task_id: 3,
      type: '–ó–∞–¥–∞–Ω–∏–µ_7',
      difficulty: 'medium',
      subject: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      content: '–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 13',
      is_active: true
    }
  ];
  
  res.json({
    message: '–î–µ–º–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    tasks: demoTasks,
    count: demoTasks.length
  });
});

// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
router.post('/demo-answer', (req, res) => {
  const { task_id, user_id, answer } = req.body;
  
  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
  const correctAnswers = {
    1: '2',
    2: '2, 4',
    3: 'x = 4'
  };
  
  const isCorrect = correctAnswers[task_id] === answer;
  
  res.json({
    task_id,
    user_id,
    answer,
    is_correct: isCorrect,
    message: isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
    rewards: isCorrect ? { exp: 50, coins: 10 } : null
  });
});

module.exports = router;
